name: Build and Deploy code

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build: 
    environment:
      name: Testing
    env:
      DATABASE_HOSTNAME: ${{secrets.DATABASE_HOSTNAME}}
      DATABASE_PORT: ${{secrets.DATABASE_PORT}}
      DATABASE_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
      DATABASE_NAME: ${{secrets.DATABASE_NAME}}
      DATABASE_USERNAME: ${{secrets.DATABASE_USERNAME}}
      SECRET_KEY: ${{secrets.SECRET_KEY}}
      ALGORITHM: ${{secrets.ALGORITHM}}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${{secrets.ACCESS_TOKEN_EXPIRE_MINUTES}}
      VUE_APP_API_HOST: ${{secrets.VUE_APP_API_HOST}}
      

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
          POSTGRES_DB: ${{secrets.DATABASE_NAME}}_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    runs-on: ubuntu-latest
    steps:
      - name: Pulling git repo
        uses: actions/checkout@v2

      - name: Install Python version 3.9
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"

      - name: Update pip
        run: python -m pip install --upgrade pip

      - name: Install Python dependencies
        run: pip install -r requirements.txt

      - name: Test with pytest
        run: |
          pip install pytest
          pytest

      - name: Install Node.js and npm
        uses: actions/setup-node@v2
        with:
          node-version: '20'  # Adjust the Node.js version as per your project requirements

      - name: Install Node.js dependencies
        run: npm install  # This installs all dependencies listed in package.json
      
  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    environment:
      name: production

    steps:
      - name: Deploying to Production
        uses: appleboy/ssh-action@master
        with:
          host: ${{secrets.PROD_HOST}}
          username: ${{secrets.PROD_USERNAME}}
          password: ${{secrets.PROD_PASSWORD}}
          script: |
            export DATABASE_HOSTNAME=${{secrets.DATABASE_HOSTNAME}}
            export DATABASE_PORT=${{secrets.DATABASE_PORT}}
            export DATABASE_PASSWORD=${{secrets.DATABASE_PASSWORD}}
            export DATABASE_NAME=${{secrets.DATABASE_NAME}}
            export DATABASE_USERNAME=${{secrets.DATABASE_USERNAME}}
            export SECRET_KEY=${{secrets.SECRET_KEY}}
            export ALGORITHM=${{secrets.ALGORITHM}}
            export ACCESS_TOKEN_EXPIRE_MINUTES=${{secrets.ACCESS_TOKEN_EXPIRE_MINUTES}}
            export VUE_APP_API_HOST=${{secrets.VUE_APP_API_HOST}}
          
            source FastAPI/FastAPI_venv/bin/activate

            cd /home/hayykgh/FastAPI/src

            # Print current directory
            echo "Current directory: $(pwd)"

            # Pull the latest changes from git
            git pull

            # Print environment variables
            echo "Database Hostname: $DATABASE_HOSTNAME"
            echo "Database Port: $DATABASE_PORT"
            echo "Database Password: $DATABASE_PASSWORD"
            echo "Database Name: $DATABASE_NAME"
            echo "Database Username: $DATABASE_USERNAME"
            echo "Secret Key: $SECRET_KEY"
            echo "Algorithm: $ALGORITHM"
            echo "Access Token Expire Minutes: $ACCESS_TOKEN_EXPIRE_MINUTES"
            echo "Vue App API Host: $VUE_APP_API_HOST"

            # Check for alembic.ini
            if [ ! -f alembic.ini ]; then
              echo "FAILED: No config file 'alembic.ini' found, or file has no '[alembic]' section"
              deactivate
              exit 1
            fi

            # Run Alembic upgrade
            alembic upgrade head

            # Check the exit status of Alembic command
            if [ $? -ne 0 ]; then
              echo "Alembic upgrade failed"
              deactivate
              exit 1
            fi

            # Restart services with error handling
            echo "Restarting API service"
            if ! systemctl restart api; then
              echo "Failed to restart API service"
              deactivate
              exit 1
            fi

            echo "Restarting Frontend Build service"
            if ! systemctl restart fe-build; then
              echo "Failed to restart Frontend Build service"
              deactivate
              exit 1
            fi

            # Deactivate the virtual environment
            deactivate

            echo "Deployment completed successfully"
